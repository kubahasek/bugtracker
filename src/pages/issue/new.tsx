import { NextPage } from "next";
import { getSession, useSession } from "next-auth/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { FormEvent } from "react";
import Navbar from "../../../components/Navbar";
import { trpc } from "../../utils/trpc";

const New: NextPage = () => {
  const categories = trpc.useQuery(["app.getCategories"]);
  const projects = trpc.useQuery(["app.getProjects"]);
  const mutation = trpc.useMutation(["app.createIssue"]);
  const router = useRouter();

  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    const session = await getSession();
    mutation.mutate({
      title: event.target.title.value,
      userid: session.userId,
      content: event.target.content.value,
      categoryId: parseInt(event.target.categoryId.value),
      projectId: parseInt(event.target.projectId.value),
    });
  };

  if (mutation.isSuccess) {
    router.push("/");
  }

  return (
    <>
      <Head>
        <title>Bugtracker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <nav>
        <Navbar />
      </nav>
      <main>
        <h1 className="text-center text-2xl uppercase dark:text-white">
          New Issue
        </h1>
        <div className="w-[80%] mx-auto">
          <form onSubmit={handleSubmit}>
            <div className="flex flex-col">
              <label
                className="block text-gray-600 text-sm font-bold mb-2"
                htmlFor="title"
              >
                Title
              </label>
              <input
                className="shadow bg-gray-500 appearance-none border-none rounded w-full py-2 px-3 text-gray-300 leading-tight focus:shadow-outline"
                id="title"
                type="text"
                placeholder="Title"
              />
              <label
                className="block text-gray-600 text-sm font-bold mb-2 mt-4"
                htmlFor="title"
              >
                Content
              </label>
              <textarea
                className="shadow bg-gray-500 appearance-none border-none rounded w-full py-2 px-3 text-gray-300 leading-tight focus:shadow-outline"
                id="content"
                placeholder="Content"
                rows={7}
              />
              <label
                className="block text-gray-600 text-sm font-bold mb-2 mt-4"
                htmlFor="title"
              >
                Category
              </label>
              <select
                className="shadow bg-gray-500 appearance-none border-none rounded w-full py-2 px-3 text-gray-300 leading-tight focus:shadow-outline"
                id="categoryId"
              >
                <option>Select a category</option>
                {categories.data?.map((category) => (
                  <option key={category.id} value={category.id}>
                    {category.name}
                  </option>
                ))}
              </select>
              <label
                className="block text-gray-600 text-sm font-bold mb-2 mt-4"
                htmlFor="title"
              >
                Project
              </label>
              <select
                className="shadow bg-gray-500 appearance-none border-none rounded w-full py-2 px-3 text-gray-300 leading-tight focus:shadow-outline"
                id="projectId"
              >
                <option>Select a project</option>
                {projects.data?.map((project) => (
                  <option key={project.id} value={project.id}>
                    {project.name}
                  </option>
                ))}
              </select>
            </div>
            <button type="submit" className="btn w-full mt-8">
              Submit
            </button>
          </form>
        </div>
      </main>
    </>
  );
};

export default New;
